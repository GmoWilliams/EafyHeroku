{"ast":null,"code":"import _slicedToArray from\"C:/Users/josee/Documents/GitHub/EafyHeroku/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import*as XLSX from'xlsx';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Dashboard(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),items=_useState2[0],setItems=_useState2[1];var readExcel=function readExcel(file){var promise=new Promise(function(resolve,reject){var fileReader=new FileReader();fileReader.readAsArrayBuffer(file);fileReader.onload=function(e){var bufferArray=e.target.result;var wb=XLSX.read(bufferArray,{type:'buffer'});var wsname=wb.SheetNames[0];var ws=wb.Sheets[wsname];var data=XLSX.utils.sheet_to_json(ws);resolve(data);};fileReader.onerror=function(error){reject(error);};});promise.then(function(d){console.log(d);setItems(d);});};return/*#__PURE__*/_jsxs(\"div\",{className:\"container micontenedor\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Dashboard\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:function onChange(e){var file=e.target.files[0];readExcel(file);}}),/*#__PURE__*/_jsxs(\"table\",{class:\"table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{scope:\"col\",children:\"Item\"}),/*#__PURE__*/_jsx(\"th\",{scope:\"col\",children:\"Description\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:items.map(function(d){return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:d.Item}),/*#__PURE__*/_jsx(\"td\",{children:d.Description})]},d.Item);})})]})]});}export default Dashboard;","map":{"version":3,"sources":["C:/Users/josee/Documents/GitHub/EafyHeroku/frontend/src/components/Paginas/Dashboard.jsx"],"names":["React","useEffect","useState","XLSX","Dashboard","items","setItems","readExcel","file","promise","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","e","bufferArray","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","onerror","error","then","d","console","log","files","map","Item","Description"],"mappings":"yIAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAO,GAAKC,CAAAA,IAAZ,KAAsB,MAAtB,C,wFAEA,QAASC,CAAAA,SAAT,EAAoB,CAChB,cAA0BF,QAAQ,CAAC,EAAD,CAAlC,wCAAOG,KAAP,eAAcC,QAAd,eAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,IAAD,CAAU,CACxB,GAAMC,CAAAA,OAAO,CAAG,GAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CAC7C,GAAMC,CAAAA,UAAU,CAAG,GAAIC,CAAAA,UAAJ,EAAnB,CACAD,UAAU,CAACE,iBAAX,CAA6BP,IAA7B,EAEAK,UAAU,CAACG,MAAX,CAAoB,SAACC,CAAD,CAAO,CACvB,GAAMC,CAAAA,WAAW,CAAGD,CAAC,CAACE,MAAF,CAASC,MAA7B,CAEA,GAAMC,CAAAA,EAAE,CAAGlB,IAAI,CAACmB,IAAL,CAAUJ,WAAV,CAAuB,CAACK,IAAI,CAAC,QAAN,CAAvB,CAAX,CACA,GAAMC,CAAAA,MAAM,CAAGH,EAAE,CAACI,UAAH,CAAc,CAAd,CAAf,CAEA,GAAMC,CAAAA,EAAE,CAAGL,EAAE,CAACM,MAAH,CAAUH,MAAV,CAAX,CACA,GAAMI,CAAAA,IAAI,CAAGzB,IAAI,CAAC0B,KAAL,CAAWC,aAAX,CAAyBJ,EAAzB,CAAb,CAEAf,OAAO,CAACiB,IAAD,CAAP,CACH,CAVD,CAYAf,UAAU,CAACkB,OAAX,CAAqB,SAACC,KAAD,CAAW,CAC5BpB,MAAM,CAACoB,KAAD,CAAN,CACH,CAFD,CAGH,CAnBe,CAAhB,CAqBAvB,OAAO,CAACwB,IAAR,CAAa,SAACC,CAAD,CAAO,CAChBC,OAAO,CAACC,GAAR,CAAYF,CAAZ,EACA5B,QAAQ,CAAC4B,CAAD,CAAR,CACH,CAHD,EAIH,CA1BD,CA4BA,mBACI,aAAK,SAAS,CAAC,wBAAf,wBACQ,iCADR,cAEQ,cAAO,IAAI,CAAC,MAAZ,CAAmB,QAAQ,CAAE,kBAACjB,CAAD,CAAK,CAC9B,GAAMT,CAAAA,IAAI,CAAGS,CAAC,CAACE,MAAF,CAASkB,KAAT,CAAe,CAAf,CAAb,CACA9B,SAAS,CAACC,IAAD,CAAT,CACH,CAHD,EAFR,cAOQ,eAAO,KAAK,CAAC,OAAb,wBACI,oCACI,mCACI,WAAI,KAAK,CAAC,KAAV,kBADJ,cAEI,WAAI,KAAK,CAAC,KAAV,yBAFJ,GADJ,EADJ,cAOI,uBACMH,KAAK,CAACiC,GAAN,CAAU,SAACJ,CAAD,qBACR,mCACI,oBAAKA,CAAC,CAACK,IAAP,EADJ,cAEI,oBAAKL,CAAC,CAACM,WAAP,EAFJ,GAASN,CAAC,CAACK,IAAX,CADQ,EAAV,CADN,EAPJ,GAPR,GADJ,CA0BH,CAED,cAAenC,CAAAA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport * as XLSX from 'xlsx';\r\n\r\nfunction Dashboard(){\r\n    const [items, setItems] = useState([]);\r\n\r\n    const readExcel = (file) => {\r\n        const promise = new Promise((resolve, reject) => {\r\n            const fileReader = new FileReader();\r\n            fileReader.readAsArrayBuffer(file)\r\n\r\n            fileReader.onload = (e) => {\r\n                const bufferArray = e.target.result;\r\n                \r\n                const wb = XLSX.read(bufferArray, {type:'buffer'});\r\n                const wsname = wb.SheetNames[0];\r\n\r\n                const ws = wb.Sheets[wsname];\r\n                const data = XLSX.utils.sheet_to_json(ws);\r\n\r\n                resolve(data);\r\n            };\r\n\r\n            fileReader.onerror = (error) => {\r\n                reject(error);\r\n            };\r\n        });\r\n\r\n        promise.then((d) => {\r\n            console.log(d);\r\n            setItems(d);\r\n        });\r\n    }\r\n\r\n    return(\r\n        <div className=\"container micontenedor\">\r\n                <h1>Dashboard</h1>\r\n                <input type=\"file\" onChange={(e)=>{\r\n                    const file = e.target.files[0];\r\n                    readExcel(file);\r\n                }}/>\r\n\r\n                <table class=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Item</th>\r\n                            <th scope=\"col\">Description</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { items.map((d) => (\r\n                            <tr key={d.Item}>\r\n                                <th>{d.Item}</th>\r\n                                <td>{d.Description}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}